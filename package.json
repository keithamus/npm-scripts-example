{
  "name": "npm-scripts-example",
  "version": "1.0.0",
  "description": "An example of how to use npm scripts over a build tool like Grunt or Gulp",
  "main": "index.js",
  "author": "Keith Cirkel <npm@keithcirkel.co.uk> (http://keithcirkel.co.uk/)",
  "license": "MIT",
  "devDependencies": {
    "browserify": "^6.3.2",
    "hashmark": "^2.0.0",
    "http-server": "^0.7.3",
    "jade": "^1.7.0",
    "jshint": "^2.5.10",
    "karma": "^0.12.28",
    "karma-browserify": "^1.0.0",
    "karma-cli": "^0.0.4",
    "karma-mocha": "^0.1.10",
    "karma-phantomjs-launcher": "^0.1.4",
    "minifyify": "^4.4.0",
    "mocha": "^2.0.1",
    "nodemon": "^1.3.*",
    "opener": "^1.4.0",
    "parallelshell": "^1.0.0",
    "rimraf": "^2.2.8",
    "s3-cli": "^0.11.1",
    "stylus": "^0.49.3"
  },
  "scripts": {
    "comments": "For these commands to work you need to have 'bash' available. In a Unix",
    "comments": "environment that is likely a moth point. But in Windows you probably have",
    "comments": "it if you installed Git for Windows. It is found in /path/to/Git/bin and",
    "comments": "you should ensure that this path to Git/bin is added in your PATH variable.",
    "comments": "All references to 'bash' will works as intended in Windows if /path/to/Git/bin",
    "comments": "is on your PATH.",
    "clean": "npm run clean:dist",
    "cleanall": "npm run clean:all",

    "comments": "We need to use rifraf because in Windows we get 'File or path name too long'",
    "comments": "and we don't delete 'node_modules/.bin' until 'rifraf' is done.",
    "clean:all": "bash -c \"rm -rf dist/* bower_components ; rimraf node_modules/* ; rm -rf node_modules npm-debug.log \"",
    "clean:dist": "bash -c 'rimraf dist/*'",

    "comments": "This is an example on how to invoke a command (like 'find') whose name also exist in Windows and",
    "comments": "might be found on the PATH before the one on /path/to/Git/bin.",
    "demo:window:conflict": "bash -c \"`dirname \"$BASH\"`/find node_modules -type d -exec bash -c 'cd {} ; echo *' \\;\"",

    "prebuild": "npm run clean -s",
    "build": "npm run build:scripts -s && npm run build:styles -s && npm run build:markup -s",
    "build:scripts": "bash -c \"browserify -d assets/scripts/main.js -p [minifyify --compressPath . --map main.js.map --output dist/main.js.map] | hashmark -n dist/main.js -s -l 8 -m assets.json 'dist/{name}{hash}{ext}'\"",
    "build:styles": "bash -c \"stylus assets/styles/main.styl -m -o dist/ && hashmark -s -l 8 -m assets.json dist/main.css 'dist/{name}{hash}{ext}'\"",
    "build:markup": "bash -c \"jade assets/markup/index.jade --obj assets.json -o dist\"",

    "test": "karma start --singleRun",

    "watch": "parallelshell \"npm run watch:test -s\" \"npm run watch:build -s\"",
    "watch:test": "karma start",
    "watch:build": "nodemon -q -w assets/ --ext \".\" --exec \"npm run build\"",

    "open:prod": "opener http://example.com",
    "open:stage": "opener http://staging.example.internal",
    "open:dev": "opener http://localhost:9090",

    "deploy:prod": "s3-cli sync ./dist/ s3://example-com/prod-site/",
    "deploy:stage": "s3-cli sync ./dist/ s3://example-com/stage-site/",

    "serve": "http-server -p 9090 dist/",
    "live-reload-dep": "^0.2.0 is brooken right now",
    "live-reload": "live-reload --port 9091 dist/",

    "dev": "npm run open:dev -s & parallelshell \"npm run live-reload -s\" \"npm run serve -s\" \"npm run watch -s\"",

    "setup": "npm run setup:npm && npm run setup:bower",
    "setup:npm": "npm install",
    "setup:bower": "echo No need for: bower install",

    "comments": "If this file is updated automatically, only the last 'comments' will be retained",
    "comments": "which means this isn't a practical way of adding permanent comments.",
    "comments": "echo You can have multiple comment entries, but if you \"npm run comments\" only the last one is used."
  }
}
